// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: src/coordinator/proto/kv.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	KVServer_Prepare_FullMethodName = "/coordinator.KVServer/Prepare"
	KVServer_Commit_FullMethodName  = "/coordinator.KVServer/Commit"
	KVServer_Abort_FullMethodName   = "/coordinator.KVServer/Abort"
	KVServer_Get_FullMethodName     = "/coordinator.KVServer/Get"
	KVServer_Set_FullMethodName     = "/coordinator.KVServer/Set"
)

// KVServerClient is the client API for KVServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KVServerClient interface {
	Prepare(ctx context.Context, in *PrepareRequest, opts ...grpc.CallOption) (*Ack, error)
	Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*Ack, error)
	Abort(ctx context.Context, in *AbortRequest, opts ...grpc.CallOption) (*Ack, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*ValueReply, error)
	Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*Ack, error)
}

type kVServerClient struct {
	cc grpc.ClientConnInterface
}

func NewKVServerClient(cc grpc.ClientConnInterface) KVServerClient {
	return &kVServerClient{cc}
}

func (c *kVServerClient) Prepare(ctx context.Context, in *PrepareRequest, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, KVServer_Prepare_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVServerClient) Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, KVServer_Commit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVServerClient) Abort(ctx context.Context, in *AbortRequest, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, KVServer_Abort_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVServerClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*ValueReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValueReply)
	err := c.cc.Invoke(ctx, KVServer_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVServerClient) Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, KVServer_Set_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KVServerServer is the server API for KVServer service.
// All implementations must embed UnimplementedKVServerServer
// for forward compatibility.
type KVServerServer interface {
	Prepare(context.Context, *PrepareRequest) (*Ack, error)
	Commit(context.Context, *CommitRequest) (*Ack, error)
	Abort(context.Context, *AbortRequest) (*Ack, error)
	Get(context.Context, *GetRequest) (*ValueReply, error)
	Set(context.Context, *SetRequest) (*Ack, error)
	mustEmbedUnimplementedKVServerServer()
}

// UnimplementedKVServerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedKVServerServer struct{}

func (UnimplementedKVServerServer) Prepare(context.Context, *PrepareRequest) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prepare not implemented")
}
func (UnimplementedKVServerServer) Commit(context.Context, *CommitRequest) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (UnimplementedKVServerServer) Abort(context.Context, *AbortRequest) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Abort not implemented")
}
func (UnimplementedKVServerServer) Get(context.Context, *GetRequest) (*ValueReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedKVServerServer) Set(context.Context, *SetRequest) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedKVServerServer) mustEmbedUnimplementedKVServerServer() {}
func (UnimplementedKVServerServer) testEmbeddedByValue()                  {}

// UnsafeKVServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KVServerServer will
// result in compilation errors.
type UnsafeKVServerServer interface {
	mustEmbedUnimplementedKVServerServer()
}

func RegisterKVServerServer(s grpc.ServiceRegistrar, srv KVServerServer) {
	// If the following call pancis, it indicates UnimplementedKVServerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&KVServer_ServiceDesc, srv)
}

func _KVServer_Prepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVServerServer).Prepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KVServer_Prepare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVServerServer).Prepare(ctx, req.(*PrepareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KVServer_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVServerServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KVServer_Commit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVServerServer).Commit(ctx, req.(*CommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KVServer_Abort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVServerServer).Abort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KVServer_Abort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVServerServer).Abort(ctx, req.(*AbortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KVServer_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVServerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KVServer_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVServerServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KVServer_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVServerServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KVServer_Set_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVServerServer).Set(ctx, req.(*SetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KVServer_ServiceDesc is the grpc.ServiceDesc for KVServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KVServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coordinator.KVServer",
	HandlerType: (*KVServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Prepare",
			Handler:    _KVServer_Prepare_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _KVServer_Commit_Handler,
		},
		{
			MethodName: "Abort",
			Handler:    _KVServer_Abort_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _KVServer_Get_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _KVServer_Set_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/coordinator/proto/kv.proto",
}
